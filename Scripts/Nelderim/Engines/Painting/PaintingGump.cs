//////////////////////////////////////////////////////////////////////
// Automatically generated by Bradley's GumpStudio and roadmaster's 
// exporter.dll,  Special thanks goes to Daegon whose work the exporter
// was based off of, and Shadow wolf for his Template Idea.
//////////////////////////////////////////////////////////////////////

//**Concept by Abracadabra for the UO Phoenix Shard || www.ultimaonlinephoenix.com || ultimaonlinephoenix@gmail.com 
//**Special thanks to Danzar for his amazing contributions and assistance, without which this may not have been finished

#define RunUo2_0

using System.Collections.Generic;
using System.Linq;
using Server.Items;
using Server.Mobiles;
using Server.Network;
using Server.Targeting;

namespace Server.Gumps
{
	public enum PaintingType
	{
		Still_Small1,
		Still_Small2,
		Still_Large1,
		Still_Large2,

		Portrait_Male,
		Portrait_Female,

		Abstract_One,
		Abstract_Two,
		Abstract_Three
	}


	public class PaintingGump : Gump
	{
		public Mobile caller;
		private PaintBrush paintbrush;

		List<PaintingConsumer> PaintConsumers = new List<PaintingConsumer>();

		public PaintingGump(Mobile from) : this()
		{
			caller = from;
		}

		public PaintingGump() : base(321, 233)
		{
			PaintConsumers.Add(new PaintingConsumer(PaintingType.Still_Small1, 1, 1));
			PaintConsumers.Add(new PaintingConsumer(PaintingType.Still_Small2, 1, 1));
			PaintConsumers.Add(new PaintingConsumer(PaintingType.Still_Large1, 1, 1));
			PaintConsumers.Add(new PaintingConsumer(PaintingType.Still_Large2, 1, 1));
			PaintConsumers.Add(new PaintingConsumer(PaintingType.Portrait_Female, 1, 1));
			PaintConsumers.Add(new PaintingConsumer(PaintingType.Portrait_Male, 1, 1));
			PaintConsumers.Add(new PaintingConsumer(PaintingType.Abstract_One, 1, 1));
			PaintConsumers.Add(new PaintingConsumer(PaintingType.Abstract_Two, 1, 1));
			PaintConsumers.Add(new PaintingConsumer(PaintingType.Abstract_Three, 1, 1));


			this.Closable = true;
			this.Disposable = true;
			this.Dragable = true;
			this.Resizable = false;

			#region Main Menu

			AddPage(1);
			AddBackground(245, 106, 321, 233, 2600);
			AddButton(320, 190, 1210, 1209, 0, GumpButtonType.Page, 2);
			AddButton(320, 240, 1210, 1209, 0, GumpButtonType.Page, 3);
			AddButton(320, 290, 1210, 1209, 0, GumpButtonType.Page, 4);
			AddLabel(360, 135, 0, @"Painting Main Menu");
			AddItem(307, 132, 3018);
			AddLabel(360, 290, 0, @"Abstracts");
			AddLabel(360, 190, 0, @"Portraits");
			AddLabel(360, 240, 0, @"Still Lifes");

			#endregion

			#region Portrait Menu

			AddPage(2);
			AddBackground(245, 106, 321, 233, 2600);
			AddLabel(360, 135, 0, @"Portrait Menu");
			AddItem(450, 210, 3815);
			AddItem(300, 210, 3747);
			AddLabel(320, 180, 0, @"Male");
			AddLabel(450, 180, 0, @"Female");
			AddButton(325, 295, 1210, 1209, 0, GumpButtonType.Reply, 1);
			AddButton(475, 295, 1210, 1209, 1, GumpButtonType.Reply, 1);

			AddButton(265, 155, 5223, 5223, 0, GumpButtonType.Page, 1);

			#endregion


			#region Landscape Menu

			AddPage(3);
			AddBackground(244, 106, 321, 233, 2600);
			AddLabel(345, 132, 0, @"Still Lifes Menu");
			AddItem(310, 180, 9229);
			AddItem(460, 180, 9231);
			AddItem(310, 255, 9233);
			AddItem(460, 255, 9235);
			AddButton(290, 195, 1210, 1209, 2, GumpButtonType.Reply, 1);
			AddButton(440, 195, 1210, 1209, 3, GumpButtonType.Reply, 1);
			AddButton(290, 285, 1210, 1209, 4, GumpButtonType.Reply, 1);
			AddButton(440, 285, 1210, 1209, 5, GumpButtonType.Reply, 1);

			AddButton(265, 155, 5223, 5223, 0, GumpButtonType.Page, 1);

			#endregion

			#region Abstract Menu

			AddPage(4);
			AddBackground(245, 106, 321, 233, 2600);
			AddLabel(345, 131, 0, @"Abstract Menu");
			AddButton(290, 300, 1210, 1209, 6, GumpButtonType.Reply, 1);
			AddButton(390, 300, 1210, 1209, 7, GumpButtonType.Reply, 1);
			AddButton(490, 305, 1210, 1209, 8, GumpButtonType.Reply, 1);
			AddItem(375, 190, 9237);
			AddItem(275, 180, 9239);
			AddItem(470, 160, 10375);

			AddButton(265, 155, 5223, 5223, 0, GumpButtonType.Page, 1);

			#endregion
		}

		public PaintingGump(Mobile from, PaintBrush paintBrush) : this(from)
		{
			this.paintbrush = paintBrush;
		}

		public override void OnResponse(NetState sender, RelayInfo info)
		{
			Mobile m_from = sender.Mobile;


			List<PaintingConsumer> testList = new List<PaintingConsumer>();

			switch (info.ButtonID)
			{
				case 0: //Male Portrait
					if (HadNeededItems(m_from, PaintingType.Portrait_Male))
					{
						m_from.SendMessage("Kogo chcialbys namalowac?");
						m_from.Target =
							new PortraitTarget(
								PaintConsumers.FirstOrDefault(x => x.PaintType == PaintingType.Portrait_Male));
					}

					break;

				case 1: //Female Portrait
					if (HadNeededItems(m_from, PaintingType.Portrait_Male))
					{
						m_from.SendMessage("Kogo chcialbys namalowac?");
						m_from.Target =
							new PortraitTarget(PaintConsumers.FirstOrDefault(x =>
								x.PaintType == PaintingType.Portrait_Female));
					}

					break;


				case 2: //Small Still Life 1
					if (HadNeededItems(m_from, PaintingType.Portrait_Male))
					{
						m_from.SendMessage("Co chcialbys namalowac?");
						m_from.Target =
							new ObjectTarget(
								PaintConsumers.FirstOrDefault(x => x.PaintType == PaintingType.Still_Small1));
					}

					break;

				case 3: //Small Still Life 2
					if (HadNeededItems(m_from, PaintingType.Portrait_Male))
					{
						m_from.SendMessage("Co chcialbys namalowac?");
						m_from.Target =
							new ObjectTarget(
								PaintConsumers.FirstOrDefault(x => x.PaintType == PaintingType.Still_Small2));
					}

					break;

				case 4: //Large Still Life 1
					if (HadNeededItems(m_from, PaintingType.Portrait_Male))
					{
						m_from.SendMessage("Co chcialbys namalowac?");
						m_from.Target =
							new ObjectTarget(
								PaintConsumers.FirstOrDefault(x => x.PaintType == PaintingType.Still_Large1));
					}

					break;

				case 5: //Large Still Life 2
					if (HadNeededItems(m_from, PaintingType.Portrait_Male))
					{
						m_from.SendMessage("Co chcialbys namalowac?");
						m_from.Target =
							new ObjectTarget(
								PaintConsumers.FirstOrDefault(x => x.PaintType == PaintingType.Still_Large2));
					}

					break;

				case 6: //Abstract Painting 1
					if (HadNeededItems(m_from, PaintingType.Portrait_Male))
					{
						m_from.SendMessage("Co chcialbys namalowac?");
						m_from.Target =
							new AbstractTarget(
								PaintConsumers.FirstOrDefault(x => x.PaintType == PaintingType.Abstract_One));
					}

					break;

				case 7: //Abstract Painting 2
					if (HadNeededItems(m_from, PaintingType.Portrait_Male))
					{
						m_from.SendMessage("Co chcialbys namalowac?");
						m_from.Target =
							new AbstractTarget(
								PaintConsumers.FirstOrDefault(x => x.PaintType == PaintingType.Abstract_Two));
					}

					break;

				case 8: //Abstract Painting 3
					if (HadNeededItems(m_from, PaintingType.Portrait_Male))
					{
						m_from.SendMessage("Co chcialbys namalowac?");
						m_from.Target =
							new AbstractTarget(
								PaintConsumers.FirstOrDefault(x => x.PaintType == PaintingType.Abstract_Three));
					}

					break;
			}
		}

		private bool HadNeededItems(Mobile owner, PaintingType paintingType)
		{
			Container pack = owner.Backpack;
			int canvasCount = pack.GetAmount(new Canvas().GetType(), true);
			int bucketCount = pack.GetAmount(new PaintBucket().GetType(), true);

			PaintingConsumer paintingConsumer = PaintConsumers.FirstOrDefault(x => x.PaintType == paintingType);
			if (canvasCount >= paintingConsumer.CanvasCount && bucketCount >= paintingConsumer.PaintBrushCount)
			{
				return true;
			}

			owner.SendMessage("Nie masz odpowiednich materialow");
			return false;
		}


		public class PortraitTarget : Target
		{
			PaintingConsumer m_PaintingConsumer { get; set; }

			public PortraitTarget(PaintingConsumer paintingConsumer) : base(10, false, TargetFlags.None)
			{
				m_PaintingConsumer = paintingConsumer;
			}

			protected override void OnTarget(Mobile from, object targeted)
			{
				if (targeted is PlayerMobile)
				{
					PlayerMobile subject = targeted as PlayerMobile;

					if (subject.Female && m_PaintingConsumer.PaintType == PaintingType.Portrait_Male)
					{
						from.SendMessage("Chyba ten portret nie spodoba sie tej osobie.");
					}
					else if (!subject.Female && m_PaintingConsumer.PaintType == PaintingType.Portrait_Female)
					{
						from.SendMessage("Chyba ten portret nie spodoba sie tej osobie.");
					}
					else
					{
						CreatePainting(from, subject.Name);
					}
				}
				else
				{
					from.SendMessage("Glupcze, tego nie namalujesz!");
					return;
				}
			}

			private void CreatePainting(Mobile from, string subject)
			{
				bool created = false;
				switch (m_PaintingConsumer.PaintType)
				{
					case PaintingType.Portrait_Female:
						created = from.AddToBackpack(new FemalePortrait(from.Name, subject));
						break;
					case PaintingType.Portrait_Male:
						created = from.AddToBackpack(new MalePortrait(from.Name, subject));
						break;
				}

				if (created)
				{
					ConsumeItems(from);
				}
			}

			private void ConsumeItems(Mobile owner)
			{
				Container pack = owner.Backpack;
				Item canvas = pack.FindItemByType<Canvas>();
				canvas.Consume(m_PaintingConsumer.CanvasCount);
				PaintBucket paintBucket = pack.FindItemByType<PaintBucket>();
				paintBucket.Consume(m_PaintingConsumer.PaintBrushCount);
			}
		}


		public class ObjectTarget : Target
		{
			PaintingConsumer m_PaintingConsumer { get; set; }

			public ObjectTarget(PaintingConsumer paintingConsumer) : base(10, false, TargetFlags.None)
			{
				m_PaintingConsumer = paintingConsumer;
			}

			protected override void OnTarget(Mobile from, object targeted)
			{
				if (targeted is Static || targeted is AddonComponent)
				{
					from.SendMessage("Glupcze, tego nie namalujesz!!");
					return;
				}

				if (targeted is Item)
				{
					Item subject = targeted as Item;
					if (string.IsNullOrEmpty(subject.Name))
					{
						string[] baseSubject = subject.GetType().ToString().Split('.');
						CreatePainting(from, baseSubject[baseSubject.Length - 1]);
					}
					else
					{
						CreatePainting(from, subject.Name);
					}
				}
				else if (targeted is Mobile)
				{
					Mobile subject = targeted as Mobile;
					if (string.IsNullOrEmpty(subject.Name))
					{
						string[] baseSubject = subject.GetType().ToString().Split('.');
						CreatePainting(from, baseSubject[baseSubject.Length - 1]);
					}
					else
					{
						CreatePainting(from, subject.Name);
					}
				}
				else
				{
					from.SendMessage("Glupcze, tego nie namalujesz!!");
					return;
				}
			}


			private void CreatePainting(Mobile from, string subject)
			{
				bool created = false;
				switch (m_PaintingConsumer.PaintType)
				{
					case PaintingType.Still_Small1:
						created = from.AddToBackpack(new StillLifeSmall1(from.Name, subject));
						break;
					case PaintingType.Still_Small2:
						created = from.AddToBackpack(new StillLifeSmall2(from.Name, subject));
						break;
					case PaintingType.Still_Large1:
						created = from.AddToBackpack(new StillLifeLarge1(from.Name, subject));
						break;
					case PaintingType.Still_Large2:
						created = from.AddToBackpack(new StillLifeLarge2(from.Name, subject));
						break;
				}

				if (created)
				{
					ConsumeItems(from);
				}
			}

			private void ConsumeItems(Mobile owner)
			{
				Container pack = owner.Backpack;
				Item canvas = pack.FindItemByType<Canvas>();
				canvas.Consume(m_PaintingConsumer.CanvasCount);
				PaintBucket paintBucket = pack.FindItemByType<PaintBucket>();
				paintBucket.Consume(m_PaintingConsumer.PaintBrushCount);
			}
		}

		public class AbstractTarget : Target
		{
			PaintingConsumer m_PaintingConsumer { get; set; }

			public AbstractTarget(PaintingConsumer paintingConsumer) : base(10, false, TargetFlags.None)
			{
				m_PaintingConsumer = paintingConsumer;
			}

			protected override void OnTarget(Mobile from, object targeted)
			{
				if (targeted is Static || targeted is AddonComponent)
				{
					from.SendMessage("Glupcze, tego nie namalujesz!!");
					return;
				}

				if (targeted is Item)
				{
					Item subject = targeted as Item;
					if (string.IsNullOrEmpty(subject.Name))
					{
						string[] baseSubject = subject.GetType().ToString().Split('.');
						CreatePainting(from, baseSubject[baseSubject.Length - 1]);
					}
					else
					{
						CreatePainting(from, subject.Name);
					}
				}
				else if (targeted is Mobile)
				{
					Mobile subject = targeted as Mobile;
					if (string.IsNullOrEmpty(subject.Name))
					{
						string[] baseSubject = subject.GetType().ToString().Split('.');
						CreatePainting(from, baseSubject[baseSubject.Length - 1]);
					}
					else
					{
						CreatePainting(from, subject.Name);
					}
				}
				else
				{
					from.SendMessage("Glupcze, tego nie namalujesz!!");
					return;
				}
			}


			private void CreatePainting(Mobile from, string subject)
			{
				bool created = false;
				switch (m_PaintingConsumer.PaintType)
				{
					case PaintingType.Abstract_One:
						created = from.AddToBackpack(new AbstractPainting1(from.Name, subject));
						break;
					case PaintingType.Abstract_Two:
						created = from.AddToBackpack(new AbstractPainting2(from.Name, subject));
						break;
					case PaintingType.Abstract_Three:
						created = from.AddToBackpack(new AbstractPainting3(from.Name, subject));
						break;
				}

				if (created)
				{
					ConsumeItems(from);
				}
			}

			private void ConsumeItems(Mobile owner)
			{
				Container pack = owner.Backpack;
				Item canvas = pack.FindItemByType<Canvas>();
				canvas.Consume(m_PaintingConsumer.CanvasCount);
				PaintBucket paintBucket = pack.FindItemByType<PaintBucket>();
				paintBucket.Consume(m_PaintingConsumer.PaintBrushCount);
			}
		}

		public class PaintingConsumer
		{
			public PaintingConsumer(PaintingType type, int canvasCount, int paintBrushCount)
			{
				CanvasCount = canvasCount;
				PaintBrushCount = paintBrushCount;
				PaintType = type;
			}

			public int CanvasCount { get; set; }
			public int PaintBrushCount { get; set; }
			public PaintingType PaintType { get; set; }
		}
	}
}
