using System;
using System.Linq;

using Server.Items;

namespace Server.PVPTournament
{
	public abstract class BaseArenaAddon : BaseAddon
	{
		private string _Name;
		
		[CommandProperty(AccessLevel.GameMaster)] // TODO: Properly change the system name
		public string ArenaName 
		{ 
			get { return _Name; }
			set
			{
				if(ValidateName(value))
				{
					_Name = value;
					Stone.System.Name = _Name;
					
					if(Stone != null)
					{
						Stone.InvalidateProperties();
					}
					
					ArenaKeeper.InvalidateProperties();
				}
			}
		}
		
		[CommandProperty(AccessLevel.GameMaster)]
		public bool Active 
		{ 
			get 
			{ 
				return Stone != null && Stone.System != null && Stone.System.Active; 
			}
			set
			{
				if(Stone != null && Stone.System != null)
				{
					Stone.System.Active = value;
				}
			}
		}
		
		[CommandProperty(AccessLevel.GameMaster)]
		public TournamentStone Stone { get; set; }
		
		private string _DefaultName = "PVP Arena";
		
		public string DefaultName
		{
			get
			{
				string name = String.Empty;
				int i = 0;
				
				do
				{
					name = String.Format("{0} #{1}", _DefaultName, ++i);
				}
				while(!Validatename(name));
				
				return name;
			}
		}
		
		[Constructable]
		public BaseArenaAddon()
			: this(null)
		{
		}
		
		[Constructable]
		public BaseArenaAddon(string name)
		{
			ConfigureSystem(name);
		}
		
		private bool ValidateName(string name)
		{
			if(string.IsNullOrEmpty(name))
			{
				return false;
			}
			
			return PVPTournamentSystem.SystemList.All(sys => sys.Name != name);
		}
		
		private void ConfigureSystem(string name)
		{
			if(ValidateName(name))
			{
				_Name = name;
			}
			else
			{
				_Name = DefaultName;
			}
			
			PVPTournamentSystem sys;
			
			Stone = new AddonArenaStone();
			var sys = new AddonArenaSystem(this, Stone);
			
			Stone.Location = sys.StoneLocation;
		}
		
		public override void OnLocationChange(Point3D oldLoc)
		{
			base.OnLocationChange(oldLoc);
			
			if(Stone != null)
			{
				var sys = Stone.System;
				Stone.Location = sys.StoneLocation;
				
				if(sys != null)
				{
					if(sys.StatsBoard != null)
						sys.StatsBoard.Location = sys.StatsBoardLocation;
					
					if(sys.TournamentBoard != null)
						sys.TournamentBoard.Location = sys.TournamentInfoBoardLocation;
					
					if(sys.TeamsBoard != null)
						sys.TeamsBoard.Location = sys.TeamsBoardLocation;
					
					if(sys.Chest != null)
						sys.Chest.Location = sys.ChestLocation;
					
					if(sys.ArenaKeeper != null)
						sys.ArenaKeeper.Location = sys.ArenaKeeperLocation;
					
					if(sys.FightRegion != null)
					{
						foreach(var m in sys.FightRegion.GetEnumeratedMobiles())
						{
							int xOffset = X - oldLoc.X;
							int yOffset = Y - oldLoc.Y;
							int zOffset = Z - oldLoc.Z;
							
							m.Location = new Point3D(m.X + xOffset, m.Y + yOffset, m.Z + zOffset);
						}
						
						sys.FightRegion.UnRegister();
						sys.FightRegion = GetFightRegion;
					}
					
					if(sys.AudienceRegion != null)
					{
						sys.AudienceRegion.UnRegister();
						sys.AudienceRegion = GetAudienceRegion;
					}
				}
			}
		}
		
		public override void OnMapChange()
		{
			base.OnMapChange();
			
			if(Map == null || Map == Map.Internal)
			{
				if(Stone != null)
				{
					Stone.System.Active = false;
				}
			}
			else if (Stone != null)
			{
				var sys = Stone.System;
				Stone.Map = Map;
				
				if(sys != null)
				{
					sys.ArenaaMap = Map;
					
					if(sys.StatsBoard != null)
						sys.StatsBoard.Map = Map;
					
					if(sys.TournamentBoard != null)
						sys.TournamentBoard.Map = Map;
					
					if(sys.TeamsBoard != null)
						sys.TeamsBoard.Map = Map;
					
					if(sys.Chest != null)
						sys.Chest.Map = Map;
					
					if(sys.ArenaKeeper != null)
						sys.ArenaKeeper.Map = Map;
					
					if(sys.FightRegion != null)
					{
						foreach(var m in sys.FightRegion.GetEnumeratedMobiles())
						{
							m.Map = Map;
						}
						
						sys.FightRegion.UnRegister();
						sys.FightRegion = GetFightRegion;
					}
					
					if(sys.AudienceRegion != null)
					{
						sys.AudienceRegion.UnRegister();
						sys.AudienceRegion = GetAudienceRegion;
					}
				}
			}
		}
		
		public override void Delete()
		{
			base.Delete();
			
			if(Stone != null)
			{
				Stone.Delete();
			}
		}
		
		public BaseArenaAddon(Serial serial) : base(serial)
		{
		}
		
		public override void Serialize(GenericWriter writer)
		{
			base.Serialize(writer);
			writer.Write(0);
			
			writer.Write(Stone);
		}
		
		public override void Deserialize(GenericReader reader)
		{
			base.Deserialize(reader);
			/*int version =*/ reader.ReaadInt();
			
			Stone = reader.ReadItem() as TournamentStone;
		}
	}
	
	public AddonArenaSystem : PVPTournamentSystem
	{
		public override Rectangle2D KickZone { get { return ConvertOffset(Definition.KickZone); } }
		public override Rectangle2D WallArea { get { return ConvertOffset(Definition.WallArea); } }
		
		public override Rectangle2D[] FightingRegionBounds { get { return ConvertOffset(Definition.FightingRegionBounds); } }
		public override Rectangle2D[] AudienceRegionBounds { get { return ConvertOffset(Definition.AudienceRegionBounds); } }
		
		public override Point3D StoneLocation { get { return ConvertOffset(Definition.StoneLocation); } }
		public override Point3D TeamAStartLocation { get { return ConvertOffset(Definition.TeamAStartLocation); } }
		public override Point3D TeamBStartLocation { get { return ConvertOffset(Definition.TeamBStartLocation); } }
		public override Point3D ArenaKeeperLocation { get { return ConvertOffset(Definition.ArenaKeeperLocation); } }
		public override Point3D TeamAWageDisplay { get { return ConvertOffset(Definition.TeamAWageDisplay); } }
		public override Point3D TeamBWageDisplay { get { return ConvertOffset(Definition.TeamBWageDisplay); } }
		public override Point3D StatsBoardLocation { get { return ConvertOffset(Definition.StatsBoardLocation); } }
		public override Point3D TournamentInfoBoardLocation { get { return ConvertOffset(Definition.TournamentInfoBoardLocation); } }
		public override Point3D TeamsBoardLocation { get { return ConvertOffset(Definition.TeamsBoardLocation); } }
		public override Point3D ChestLocation { get { return ConvertOffset(Definition.ChestLocation); } }
		
		private BaseArenaAddon _Addon;
		
		[CommandProperty(AccessLevel.GameMaster)]
		public BaseArenaAddon Addon 
		{
			get { return _Addon; }
			set
			{
				if(_Addon != null && value == null)
				{
					Delete();
				}
				
				_Addon = value;
			}
		}
		
		public override ArenaDefinition Definition { get { return Addon.Definition; } }
		
		public AddonArenaSystem(BaseArenaAddon addon, TournamentStone stone)
			: base(stone)
		{
			Addon = addon;
		}
		
		private Point3D ConvertOffset(Point3D offset)
		{
			return new Point3D(X + offset.X, Y + offset.Y, Z + offset.Z);
		}
		
		private Rectangle2D ConvertOffset(Rectangle2D rec)
		{
			return new Rectangle(X + rec.X, Y + rec.Y, rec.Width, rec.Height);
		}
		
		private Rectangle2D[] ConvertOffset(Rectangle2D[] recs)
		{
			var newRec = new Reactangle[recs.Length];
			
			for(int i = 0; i < recs.Length; i++)
			{
				newRec[i] = ConvertOffset(recs[i]);
			}
			
			return newRec;
		}
		
		public BaseArenaAddon(GenericReader reader, TournamentStone stone) : base(reader, stone)
		{
		}
		
		public override void Serialize(GenericWriter writer)
		{
			base.Serialize(writer);
			writer.Write(0);
			
			writer.Write(Addon);
		}
		
		public override void Deserialize(GenericReader reader)
		{
			base.Deserialize(reader);
			/*int version =*/ reader.ReaadInt();
			
			Addon = reader.ReadItem() as BaseArenaAddon;
		}
	}
	
	public AddonArenaStone : TournamentStone
	{
		public AddonArenaStone(TournamentStone stone)
		{
		}
		
		public AddonArenaStone(Serial serial) : base(serial)
		{
		}
		
		public override void LoadSystem(GenericReader reader)
		{
			System = new AddonArenaSystem(reader, this);
		}
		
		public override void Serialize(GenericWriter writer)
		{
			base.Serialize(writer);
			writer.Write(0);
		}
		
		public override void Deserialize(GenericReader reader)
		{
			base.Deserialize(reader);
			/*int version =*/ reader.ReaadInt();
		}
	}
}
